name: Auto-publish release & update appcast

permissions:
  contents: write
on:
  push:
  tags:
      - "v*"
    workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to process (e.g., v1.1.5)'
        required: false
jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Determine tag
        id: tag
        shell: pwsh
        run: |
          $tag = "${{ github.ref_type == 'tag' && github.ref_name || '' }}"
          if (-not $tag) { $tag = "${{ github.event.inputs.tag }}" }
          if (-not $tag) { Write-Error 'No tag provided. For manual runs, provide an input "tag".'; exit 1 }
          echo "tag=$tag" >> $env:GITHUB_OUTPUT

      - name: Download installer asset
        id: download
        env:
          GH_TOKEN: ${{ github.token }}
        shell: pwsh
        run: |
          $tag = "${{ steps.tag.outputs.tag }}"
          Write-Host "Downloading release assets for $tag ..."
          mkdir dist | Out-Null
          gh release download "$tag" --pattern "*.exe" --dir dist --clobber
          $exe = Get-ChildItem -Path dist -Filter *.exe -File | Select-Object -First 1
          if (-not $exe) { Write-Error "No .exe asset found on release $tag. Upload the installer to the release and re-run."; exit 1 }
          echo "installer=$($exe.FullName)" >> $env:GITHUB_OUTPUT
          echo "installer_name=$($exe.Name)" >> $env:GITHUB_OUTPUT

      - name: Compute hash and size
        id: meta
        shell: pwsh
        run: |
          $path = "${{ steps.download.outputs.installer }}"
          $hash = (Get-FileHash $path -Algorithm SHA256).Hash.ToLower()
          $size = (Get-Item $path).Length
          echo "sha256=$hash" >> $env:GITHUB_OUTPUT
          echo "size=$size" >> $env:GITHUB_OUTPUT

      - name: Update appcast.json
        shell: pwsh
        run: |
          $tag   = "${{ steps.tag.outputs.tag }}"
          $ver   = $tag.TrimStart('v')
          $hash  = "${{ steps.meta.outputs.sha256 }}"
          $size  = "${{ steps.meta.outputs.size }}"
          $asset = "${{ steps.download.outputs.installer_name }}"
          $url   = "https://github.com/${{ github.repository }}/releases/download/$tag/$asset"

          $appcastPath = 'updates/appcast.json'
          $json = Get-Content $appcastPath -Raw | ConvertFrom-Json

          $json.latest   = $ver
          $json.published = (Get-Date).ToUniversalTime().ToString('s') + 'Z'
          $json.notes    = "Auto release $tag"

          if (-not $json.installer) { $json | Add-Member -NotePropertyName installer -NotePropertyValue @{} }
          $json.installer.url    = $url
          $json.installer.size   = [int64]$size
          $json.installer.sha256 = $hash

          $json | ConvertTo-Json -Depth 5 | Out-File -Encoding utf8 $appcastPath

          git config user.name  'github-actions'
          git config user.email 'github-actions@github.com'
          git add $appcastPath
          git commit -m "Update appcast.json for $tag"
          git push origin HEAD:main
